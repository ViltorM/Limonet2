let lang = 'ua';
let translations = {};
let products = [];
let cart = [];
let currentView = 'grid'; // grid, list, horizontal

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
fetch('translations.js')
  .then(response => response.text())
  .then(data => {
    eval(data);
    applyTranslations();
  })
  .catch(error => console.error('Error loading translations:', error));

// –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —è–∑—ã–∫
  const savedLang = localStorage.getItem('limonet_lang');
  if (savedLang) {
    lang = savedLang;
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É —è–∑—ã–∫–∞
    document.querySelectorAll('.lang-switcher button').forEach(btn => {
      btn.classList.remove('active');
      if (btn.textContent === lang.toUpperCase()) {
        btn.classList.add('active');
      }
    });
  }
  
  const savedCart = localStorage.getItem('limonet_cart');
  if (savedCart) {
    cart = JSON.parse(savedCart);
    renderCart();
  }
  
  const savedCss = localStorage.getItem('limonet_css');
  if (savedCss) {
    const styleTag = document.createElement('style');
    styleTag.textContent = savedCss;
    styleTag.id = 'dynamic-css';
    document.head.appendChild(styleTag);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  fetch('products.json')
    .then(res => res.json())
    .then(data => {
      products = data;
      renderProducts();
      initFeaturedBanner();
    })
    .catch(error => console.error('Error loading products:', error));
    
  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∞
  const savedView = localStorage.getItem('product_view');
  if (savedView) {
    currentView = savedView;
    document.querySelectorAll('.view-option').forEach(btn => {
      btn.classList.remove('active');
      if (btn.getAttribute('data-view') === currentView) {
        btn.classList.add('active');
      }
    });
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –≤–∏–¥–∞
  document.querySelectorAll('.view-option').forEach(btn => {
    btn.addEventListener('click', () => {
      document.querySelectorAll('.view-option').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      currentView = btn.getAttribute('data-view');
      localStorage.setItem('product_view', currentView);
      renderProducts();
    });
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const addIcon = (selector, iconCode) => {
    const input = document.querySelector(selector);
    if (input) {
      const wrapper = document.createElement('div');
      wrapper.className = 'input-with-icon';
      input.parentNode.insertBefore(wrapper, input);
      wrapper.appendChild(input);
      
      wrapper.insertAdjacentHTML('afterbegin', 
        `<span class="input-icon">${iconCode}</span>`);
    }
  };
  
  addIcon('input[name="fio"]', 'üë§');
  addIcon('input[name="phone"]', 'üì±');
  addIcon('input[name="city"]', 'üèôÔ∏è');
  addIcon('input[name="post"]', 'üìÆ');
  
  // –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–±–æ—Ä–æ–º –æ–ø–ª–∞—Ç—ã
  const paymentSelect = document.querySelector('select[name="payment"]');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
  if (!paymentSelect.value) {
    paymentSelect.selectedIndex = 0;
  }
  
  // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
  paymentSelect.addEventListener('change', function() {
    if (this.value) {
      const placeholderOption = this.querySelector('option[disabled]');
      if (placeholderOption) {
        placeholderOption.removeAttribute('selected');
      }
    }
  });
  
  // –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
  document.getElementById('order-form').addEventListener('submit', function() {
    if (paymentSelect.value) {
      const placeholderOption = paymentSelect.querySelector('option[disabled]');
      if (placeholderOption) {
        placeholderOption.removeAttribute('selected');
      }
    }
  });
});

function setLang(selectedLang) {
  lang = selectedLang;
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
  localStorage.setItem('limonet_lang', lang);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
  document.querySelectorAll('.lang-switcher button').forEach(btn => {
    btn.classList.remove('active');
    if (btn.textContent === lang.toUpperCase()) {
      btn.classList.add('active');
    }
  });
  
  applyTranslations();
  renderProducts();
  renderCart(); // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
}

function applyTranslations() {
  document.querySelectorAll('[data-translate]').forEach(el => {
    const key = el.getAttribute('data-translate');
    if (translations[lang] && translations[lang][key]) {
      el.textContent = translations[lang][key];
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
  document.querySelectorAll('[data-translate-placeholder]').forEach(el => {
    const key = el.getAttribute('data-translate-placeholder');
    if (translations[lang] && translations[lang][key]) {
      el.placeholder = translations[lang][key];
    }
  });
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π –≤–∏–¥–æ–≤
  document.querySelectorAll('.view-option').forEach(btn => {
    const viewType = btn.getAttribute('data-view');
    const translationKey = `${viewType}_view`;
    if (translations[lang] && translations[lang][translationKey]) {
      btn.setAttribute('title', translations[lang][translationKey]);
      btn.setAttribute('aria-label', translations[lang][translationKey]);
    }
  });
}

// –ë–∞–Ω–Ω–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
function initFeaturedBanner() {
  const featuredSettings = JSON.parse(localStorage.getItem('featured_settings')) || {
    enabled: false,
    products: [],
    autoRotate: true
  };
  
  if (!featuredSettings.enabled || featuredSettings.products.length === 0) {
    document.getElementById('featured-products').style.display = 'none';
    return;
  }
  
  document.getElementById('featured-products').style.display = 'block';
  const container = document.querySelector('.featured-items');
  container.innerHTML = '';
  
  featuredSettings.products.forEach(id => {
    const [catIndex, itemIndex] = id.split('-');
    const product = products[catIndex]?.items[itemIndex];
    if (!product) return;
    
    const div = document.createElement('div');
    div.className = 'featured-item';
    div.innerHTML = `
      <img src="${product.image}" alt="${product.name[lang] || product.name}">
      <h4>${product.name[lang] || product.name}</h4>
      <p>${product.price} –≥—Ä–Ω</p>
    `;
    container.appendChild(div);
  });
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  document.getElementById('prev-featured').addEventListener('click', () => {
    document.querySelector('.featured-items').scrollBy({ left: -200, behavior: 'smooth' });
  });
  
  document.getElementById('next-featured').addEventListener('click', () => {
    document.querySelector('.featured-items').scrollBy({ left: 200, behavior: 'smooth' });
  });
}

function renderProducts() {
  const container = document.getElementById('products');
  if (!container) {
    console.error('Products container not found');
    return;
  }
  container.innerHTML = '';
  
  products.forEach((category, catIndex) => {
    const categoryWrapper = document.createElement('div');
    categoryWrapper.className = 'category-container';
    container.appendChild(categoryWrapper);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const firstItem = category.items.find(item => item.status !== "hidden") || category.items[0];
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º
    const header = document.createElement('div');
    header.className = 'category-header';
    header.setAttribute('data-cat', catIndex);
    
    const title = document.createElement('h3');
    title.className = 'category-title';
    title.textContent = category.category[lang] || category.category;
    
    const toggleIcon = document.createElement('span');
    toggleIcon.className = 'toggle-icon';
    toggleIcon.innerHTML = '‚ñº';
    
    header.appendChild(title);
    header.appendChild(toggleIcon);
    categoryWrapper.appendChild(header);
    
    // –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å–≤—ë—Ä–Ω—É—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    const content = document.createElement('div');
    content.className = 'category-content';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Ñ—É—Ç–ª—è—Ä–æ–≤
    const sizeHtml = firstItem.externalSize ? `
      <p class="category-size">
        ${translations[lang]?.external_size || 'External size'}: ${firstItem.externalSize}
      </p>
    ` : '';
    
    content.innerHTML = `
      <img src="${firstItem.image}" alt="${category.category[lang] || category.category}" class="category-image">
      <div class="category-info">
        <p class="category-material">
          ${translations[lang]?.material || 'Material'}: 
          ${firstItem.material?.[lang] || firstItem.material || ''}
        </p>
        ${sizeHtml}
      </div>
    `;
    
    categoryWrapper.appendChild(content);
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
    const itemsContainer = document.createElement('div');
    itemsContainer.className = 'products-group';
    itemsContainer.style.display = 'none'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∫—Ä—ã—Ç
    categoryWrapper.appendChild(itemsContainer);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
    header.addEventListener('click', () => {
      const isExpanded = itemsContainer.style.display === 'block';
      itemsContainer.style.display = isExpanded ? 'none' : 'block';
      categoryWrapper.classList.toggle('expanded', !isExpanded);
      
      // –ï—Å–ª–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º - —Ä–µ–Ω–¥–µ—Ä–∏–º —Ç–æ–≤–∞—Ä—ã
      if (!isExpanded && itemsContainer.children.length === 0) {
        renderCategoryItems(category, catIndex, itemsContainer);
      }
    });
  });
}

function renderCategoryItems(category, catIndex, container) {
  container.innerHTML = '';
  
  const productsContainer = document.createElement('div');
  productsContainer.className = `products-container ${currentView}-view`;
  container.appendChild(productsContainer);
  
  category.items.forEach((item, itemIndex) => {
    if (item.status === "hidden") return;
    
    const card = document.createElement('div');
    card.className = 'product-card';
    
    const name = item.name[lang] || item.name;
    const description = item.description?.[lang] || item.description || '';
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
    let statusClass = '';
    let statusText = '';
    
    if (item.status === 'in_stock') {
      statusClass = 'in-stock';
      statusText = translations[lang]?.in_stock || 'In stock';
    } else if (item.status === 'soon') {
      statusClass = 'soon';
      statusText = translations[lang]?.soon || 'Coming soon';
    } else if (item.status === 'out_of_stock') {
      statusClass = 'out-of-stock';
      statusText = translations[lang]?.out_of_stock || 'Out of stock';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞
    const isDisabled = item.status === 'out_of_stock';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
    const externalSize = item.externalSize ? `
      <div class="size-item">
        <span>${translations[lang]?.external_size || 'External size'}: ${item.externalSize}</span>
      </div>
    ` : '';
    
    const internalSize = item.internalSize ? `
      <div class="size-item">
        <span>${translations[lang]?.internal_size || 'Internal size'}: ${item.internalSize}</span>
      </div>
    ` : '';
    
    const sizes = (externalSize || internalSize) ? `
      <div class="product-sizes">
        ${externalSize}
        ${internalSize}
      </div>
    ` : '';

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    const material = item.material?.[lang] || item.material || '';
    const materialHtml = material ? `
      <div class="product-material">
        <span class="material-label">${translations[lang]?.material || 'Material'}:</span>
        <span class="material-value">${material}</span>
      </div>
    ` : '';

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    if (currentView === 'list') {
      card.innerHTML = `
        <img src="${item.image}" alt="${name}">
        <div class="product-info">
          <div class="product-group">
            <h4>${name}</h4>
            <div class="description">${description}</div>
          </div>
          ${sizes}
          ${materialHtml}
          <div class="control-group">
            ${statusText ? `<div class="status ${statusClass}">${statusText}</div>` : ''}
            <div class="product-price">${item.price} –≥—Ä–Ω</div>
          </div>
        </div>
        <div class="product-controls">
          <div class="quantity-controls">
            <button class="quantity-btn minus" data-cat="${catIndex}" data-item="${itemIndex}" 
                    ${isDisabled ? 'disabled' : ''}>-</button>
            <input type="number" min="1" value="1" class="quantity-input" 
                   data-cat="${catIndex}" data-item="${itemIndex}" 
                   ${isDisabled ? 'disabled' : ''}>
            <button class="quantity-btn plus" data-cat="${catIndex}" data-item="${itemIndex}" 
                    ${isDisabled ? 'disabled' : ''}>+</button>
          </div>
          <button class="add-to-cart btn-primary" data-cat="${catIndex}" data-item="${itemIndex}" 
                  ${isDisabled ? 'disabled' : ''}>
            ${translations[lang]?.add_to_cart || 'Add to cart'}
          </button>
        </div>
      `;
    } else {
      card.innerHTML = `
        <img src="${item.image}" alt="${name}">
        
        <div class="product-group">
          <h4>${name}</h4>
          <div class="description">${description}</div>
        </div>
        
        ${sizes}
        ${materialHtml}
        
        <div class="control-group">
          ${statusText ? `<div class="status ${statusClass}">${statusText}</div>` : ''}
          <div class="product-price">${item.price} –≥—Ä–Ω</div>
          
          <div class="quantity-controls">
            <button class="quantity-btn minus" data-cat="${catIndex}" data-item="${itemIndex}" 
                    ${isDisabled ? 'disabled' : ''}>-</button>
            <input type="number" min="1" value="1" class="quantity-input" 
                   data-cat="${catIndex}" data-item="${itemIndex}" 
                   ${isDisabled ? 'disabled' : ''}>
            <button class="quantity-btn plus" data-cat="${catIndex}" data-item="${itemIndex}" 
                    ${isDisabled ? 'disabled' : ''}>+</button>
          </div>
          
          <button class="add-to-cart btn-primary" data-cat="${catIndex}" data-item="${itemIndex}" 
                  ${isDisabled ? 'disabled' : ''}>
            ${translations[lang]?.add_to_cart || 'Add to cart'}
          </button>
        </div>
      `;
    }
    
    productsContainer.appendChild(card);
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  setTimeout(() => {
    document.querySelectorAll('.add-to-cart:not(:disabled)').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const catIndex = e.target.getAttribute('data-cat');
        const itemIndex = e.target.getAttribute('data-item');
        const quantityInput = e.target.closest('.product-card').querySelector('.quantity-input');
        const quantity = parseInt(quantityInput.value);
        
        addToCart(catIndex, itemIndex, quantity);
      });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ +/-
    document.querySelectorAll('.quantity-btn.plus:not(:disabled)').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const input = e.target.parentElement.querySelector('.quantity-input');
        input.value = parseInt(input.value) + 1;
      });
    });
    
    document.querySelectorAll('.quantity-btn.minus:not(:disabled)').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const input = e.target.parentElement.querySelector('.quantity-input');
        if (input.value > 1) {
          input.value = parseInt(input.value) - 1;
        }
      });
    });
  }, 100);
}

function addToCart(catIndex, itemIndex, quantity) {
  const product = products[catIndex].items[itemIndex];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
  const existingItem = cart.find(item => 
    item.catIndex == catIndex && item.itemIndex == itemIndex
  );
  
  if (existingItem) {
    existingItem.quantity += quantity;
  } else {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–≤–∞—Ä–∞, –∞ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    cart.push({
      catIndex: parseInt(catIndex),
      itemIndex: parseInt(itemIndex),
      quantity: quantity,
      price: product.price,
      // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ, –±—É–¥–µ–º –±—Ä–∞—Ç—å –µ–≥–æ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      image: product.image,
      externalSize: product.externalSize,
      internalSize: product.internalSize,
      material: product.material?.[lang] || product.material || ''
    });
  }
  
  saveCart();
  renderCart();
  
  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  const btn = document.querySelector(`.add-to-cart[data-cat="${catIndex}"][data-item="${itemIndex}"]`);
  if (btn) {
    btn.classList.add('animate');
    setTimeout(() => btn.classList.remove('animate'), 500);
  }
}

// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ö–û–†–ó–ò–ù–´ –° –§–ò–ö–°–û–ú –ü–ï–†–ï–í–û–î–ê
function renderCart() {
  const container = document.getElementById('cart-items');
  if (!container) return;
  
  const totalElement = document.getElementById('cart-total');
  if (!totalElement) return;
  
  container.innerHTML = '';
  
  let total = 0;
  
  // –ë–µ—Ä–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "–í–Ω–µ—à–Ω–∏–µ —Ä–∞–∑–º–µ—Ä—ã" –∏–∑ –æ–±—ä–µ–∫—Ç–∞ translations –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
  const externalSizeLabel = translations[lang]?.external_size || '–ó–æ–≤–Ω—ñ—à–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏';
  
  cart.forEach((item, index) => {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    const product = products[item.catIndex]?.items[item.itemIndex];
    if (!product) return;
    
    // –ë–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
    const productName = product.name[lang] || product.name;
    
    const li = document.createElement('li');
    li.className = 'cart-item';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    const externalSizeHtml = item.externalSize ? 
      `<div class="item-size">${externalSizeLabel}: ${item.externalSize}</div>` : '';
    
    li.innerHTML = `
      <img src="${item.image}" alt="${productName}">
      <div class="item-info">
        <div class="item-name">${productName}</div>
        ${externalSizeHtml}
        <div class="item-price">${item.price} –≥—Ä–Ω √ó ${item.quantity}</div>
      </div>
      <div class="item-controls">
        <div class="quantity-controls">
          <button class="quantity-btn cart-minus" data-index="${index}">-</button>
          <input type="number" min="1" value="${item.quantity}" class="quantity-input cart-quantity" data-index="${index}">
          <button class="quantity-btn cart-plus" data-index="${index}">+</button>
        </div>
        <button class="remove-item" data-index="${index}">‚úï</button>
      </div>
    `;
    container.appendChild(li);
    
    total += item.price * item.quantity;
  });
  
  totalElement.textContent = total.toFixed(2);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  document.querySelectorAll('.remove-item').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const index = e.target.getAttribute('data-index');
      removeFromCart(index);
    });
  });
  
  document.querySelectorAll('.cart-minus').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const index = e.target.getAttribute('data-index');
      updateCartItemQuantity(index, -1);
    });
  });
  
  document.querySelectorAll('.cart-plus').forEach(btn => {
    btn.addEventListener('click', (e) => {
      const index = e.target.getAttribute('data-index');
      updateCartItemQuantity(index, 1);
    });
  });
  
  document.querySelectorAll('.cart-quantity').forEach(input => {
    input.addEventListener('change', (e) => {
      const index = e.target.getAttribute('data-index');
      const value = parseInt(e.target.value);
      if (value > 0) {
        cart[index].quantity = value;
        saveCart();
        renderCart();
      }
    });
  });
}

function updateCartItemQuantity(index, change) {
  const newQuantity = cart[index].quantity + change;
  if (newQuantity > 0) {
    cart[index].quantity = newQuantity;
    saveCart();
    renderCart();
  }
}

function removeFromCart(index) {
  cart.splice(index, 1);
  saveCart();
  renderCart();
}

function saveCart() {
  localStorage.setItem('limonet_cart', JSON.stringify(cart));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
document.getElementById('order-form')?.addEventListener('submit', function(e) {
  e.preventDefault();
  
  if (cart.length === 0) {
    alert(lang === 'ua' ? '–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!' : '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
    return;
  }
  
  const formData = new FormData(this);
  const order = {
    id: Date.now(),
    customer: Object.fromEntries(formData),
    items: [...cart],
    total: document.getElementById('cart-total').textContent,
    date: new Date().toLocaleString('ua-UA', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    }),
    status: 'new'
  };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
  saveOrder(order);
  
  alert(lang === 'ua' 
    ? '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ! –ú–∏ –∑ –≤–∞–º–∏ –∑–≤\'—è–∂–µ–º–æ—Å—å.' 
    : '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.');
  
  // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
  cart = [];
  saveCart();
  renderCart();
  this.reset();
});

function saveOrder(order) {
  const orders = JSON.parse(localStorage.getItem('limonet_orders')) || [];
  orders.push(order);
  localStorage.setItem('limonet_orders', JSON.stringify(orders));
  const event = new Event('newOrder');
  document.dispatchEvent(event);
}

// –î–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
document.addEventListener('dataUpdated', () => {
  fetch('products.json')
    .then(res => res.json())
    .then(data => {
      products = data;
      renderProducts();
      initFeaturedBanner();
    });
});
